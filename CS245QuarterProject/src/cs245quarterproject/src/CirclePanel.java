/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CirclePackage;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.BorderFactory;
import javax.swing.ButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Stream17
 */
public class CirclePanel extends javax.swing.JPanel implements ChangeListener, ActionListener {
    private ArrayList<JButton> buttonList = new ArrayList();
    private String[]Colors = {"Red","Yellow","Blue","Purple","Green"};
    private final int TOTAL_CIRCLES = 9;
    /**
     * Creates new form CirclePanel
     */
    public CirclePanel() {
        initComponents();

        
        //remove(CircleButton2);
        setVisible(true);
        setOpaque(true);
        buttonList.add(CircleButton1);
        buttonList.add(CircleButton2);
        buttonList.add(CircleButton3);
        buttonList.add(CircleButton4);
        buttonList.add(CircleButton5);
        buttonList.add(CircleButton6);
        buttonList.add(CircleButton7);
        buttonList.add(CircleButton8);
        buttonList.add(CircleButton9);
        
        initCircleButtons();
        spawnButtons();
    }
    
    /**
     * Incomplete method
     * spawnButtons() shuffles the contents of the buttonList which contains
     * all of this panels circle buttons. It then sets the action commands and icons 
     * of the first five buttons in the shuffled collection to their designated color from
     * Colors[]
     */
    private void spawnButtons(){
        Collections.shuffle(buttonList);
        for(int i = 0; i < 5; i++){
            buttonList.get(i).setActionCommand(Colors[i]);
            buttonList.get(i).setIcon(new ImageIcon(Colors[i] + "Button.png"));
        }
        
        for(int i = 5; i < 9; i++){
            buttonList.get(i).setActionCommand(null);
            buttonList.get(i).setIcon(null);
        }
    }
    
    /**
     * This method gets rid of the backgrounds of all the buttons in 
     * buttonList and also registers this panel as their action and change
     * listeners.
     */
    private void initCircleButtons(){
        for(int i = 0; i < TOTAL_CIRCLES; i++){
            buttonList.get(i).addActionListener(this);
            buttonList.get(i).addChangeListener(this);
            buttonList.get(i).setContentAreaFilled(false);
            buttonList.get(i).setBorderPainted(false);
            buttonList.get(i).setBorder(BorderFactory.createEmptyBorder());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CircleButton1 = new javax.swing.JButton();
        CircleButton2 = new javax.swing.JButton();
        CircleButton3 = new javax.swing.JButton();
        CircleButton4 = new javax.swing.JButton();
        CircleButton5 = new javax.swing.JButton();
        CircleButton6 = new javax.swing.JButton();
        CircleButton7 = new javax.swing.JButton();
        CircleButton8 = new javax.swing.JButton();
        CircleButton9 = new javax.swing.JButton();

        CircleButton2.setContentAreaFilled(false);
        CircleButton2.setBorderPainted(false);
        CircleButton2.setBorder(BorderFactory.createEmptyBorder());
        CircleButton2.addChangeListener(this);
        CircleButton2.addActionListener(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(CircleButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CircleButton7)
                .addGap(180, 180, 180)
                .addComponent(CircleButton9)
                .addGap(65, 65, 65))
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(CircleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(CircleButton3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(CircleButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CircleButton2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CircleButton6)
                                .addGap(59, 59, 59)
                                .addComponent(CircleButton8)))))
                .addGap(47, 47, 47))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {CircleButton1, CircleButton2, CircleButton3, CircleButton4, CircleButton5, CircleButton6, CircleButton7, CircleButton8, CircleButton9});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(CircleButton3)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CircleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(CircleButton7))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(CircleButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CircleButton5)
                                .addGap(34, 34, 34)
                                .addComponent(CircleButton6))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CircleButton8)
                                .addGap(34, 34, 34)))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CircleButton2)
                            .addComponent(CircleButton9))))
                .addGap(28, 28, 28))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {CircleButton1, CircleButton2, CircleButton3, CircleButton4, CircleButton5, CircleButton6, CircleButton7, CircleButton8, CircleButton9});

    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CircleButton1;
    private javax.swing.JButton CircleButton2;
    private javax.swing.JButton CircleButton3;
    private javax.swing.JButton CircleButton4;
    private javax.swing.JButton CircleButton5;
    private javax.swing.JButton CircleButton6;
    private javax.swing.JButton CircleButton7;
    private javax.swing.JButton CircleButton8;
    private javax.swing.JButton CircleButton9;
    // End of variables declaration//GEN-END:variables

    @Override
    /**
     * The method stateChanged is used to swap the pictures of a button when the mouse is rolled over it.
     * It gets the color by getting the source of the change event ce and getting the action command of
     * its source.
     * 
     * It then gets the source's ButtonModel and checks to see if the mouse is rolled over it.
     * The sources icon is then set to the appropriate picture.
     * @param ce the changeEvent passed into this method
     */
    public void stateChanged(ChangeEvent ce) {
        String color = ((JButton)ce.getSource()).getActionCommand();
        ButtonModel mod = ((JButton)ce.getSource()).getModel();
        if(mod.isRollover())
             ((JButton)ce.getSource()).setIcon(new ImageIcon(color + "ButtonRollover.png"));
        
        if(!mod.isRollover())
            ((JButton)ce.getSource()).setIcon(new ImageIcon(color + "Button.png"));
    }

    @Override
    /**
     * this method just spawns buttons for now
     * feel free to add functionality for the game here.
     */
    public void actionPerformed(ActionEvent ae) {
        spawnButtons();
    }
}
